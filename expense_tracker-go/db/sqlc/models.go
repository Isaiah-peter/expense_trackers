// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"fmt"
	"time"
)

type TransactionStatue string

const (
	TransactionStatueExpense TransactionStatue = "expense"
	TransactionStatueIncome  TransactionStatue = "income"
)

func (e *TransactionStatue) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatue(s)
	case string:
		*e = TransactionStatue(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatue: %T", src)
	}
	return nil
}

type Category struct {
	ID        int32     `json:"id"`
	UserID    int32     `json:"user_id"`
	Icon      string    `json:"icon"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Transaction struct {
	ID         int32 `json:"id"`
	CategoryID int32 `json:"category_id"`
	UserID     int32 `json:"user_id"`
	// but nagative and positive number
	Amount    int64             `json:"amount"`
	Notes     string            `json:"notes"`
	CreatedAt time.Time         `json:"created_at"`
	UpdatedAt time.Time         `json:"updated_at"`
	Status    TransactionStatue `json:"status"`
}

type User struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
