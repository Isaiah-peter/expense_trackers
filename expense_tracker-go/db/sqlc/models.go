// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"database/sql"
	"fmt"
)

type TransactionStatue string

const (
	TransactionStatueExpense TransactionStatue = "expense"
	TransactionStatueIncome  TransactionStatue = "income"
)

func (e *TransactionStatue) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatue(s)
	case string:
		*e = TransactionStatue(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatue: %T", src)
	}
	return nil
}

type Category struct {
	ID        int32          `json:"id"`
	UserID    sql.NullInt32  `json:"user_id"`
	Icon      sql.NullString `json:"icon"`
	Name      string         `json:"name"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

type Transaction struct {
	ID         int32         `json:"id"`
	CategoryID sql.NullInt32 `json:"category_id"`
	UserID     sql.NullInt32 `json:"user_id"`
	// but nagative and positive number
	Ammout    int64             `json:"ammout"`
	Notes     string            `json:"notes"`
	CreatedAt sql.NullTime      `json:"created_at"`
	UpdatedAt sql.NullTime      `json:"updated_at"`
	Status    TransactionStatue `json:"status"`
}

type User struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}
