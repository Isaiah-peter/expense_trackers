// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: transaction.sql

package db

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  user_id, category_id, ammout, notes, status
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, category_id, user_id, ammout, notes, created_at, updated_at, status
`

type CreateTransactionParams struct {
	UserID     int32             `json:"user_id"`
	CategoryID int32             `json:"category_id"`
	Ammout     int64             `json:"ammout"`
	Notes      string            `json:"notes"`
	Status     TransactionStatue `json:"status"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.CategoryID,
		arg.Ammout,
		arg.Notes,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.UserID,
		&i.Ammout,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTotalAmount = `-- name: GetTotalAmount :many
SELECT SUM(ammout) from transactions
WHERE user_id  = $1
AND status = $2
AND status = $3
`

type GetTotalAmountParams struct {
	UserID   int32             `json:"user_id"`
	Status   TransactionStatue `json:"status"`
	Status_2 TransactionStatue `json:"status_2"`
}

func (q *Queries) GetTotalAmount(ctx context.Context, arg GetTotalAmountParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getTotalAmount, arg.UserID, arg.Status, arg.Status_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var sum int64
		if err := rows.Scan(&sum); err != nil {
			return nil, err
		}
		items = append(items, sum)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, category_id, user_id, ammout, notes, created_at, updated_at, status FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.UserID,
		&i.Ammout,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const listTransactionByStatus = `-- name: ListTransactionByStatus :many
SELECT SUM(amount) FROM transactions
WHERE user_id = $1
AND status = $2
`

type ListTransactionByStatusParams struct {
	UserID int32             `json:"user_id"`
	Status TransactionStatue `json:"status"`
}

func (q *Queries) ListTransactionByStatus(ctx context.Context, arg ListTransactionByStatusParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionByStatus, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var sum int64
		if err := rows.Scan(&sum); err != nil {
			return nil, err
		}
		items = append(items, sum)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, category_id, user_id, ammout, notes, created_at, updated_at, status FROM transactions
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserID,
			&i.Ammout,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByCategoryID = `-- name: ListTransactionsByCategoryID :many
SELECT id, category_id, user_id, ammout, notes, created_at, updated_at, status FROM transactions
WHERE category_id = $1
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListTransactionsByCategoryIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactionsByCategoryID(ctx context.Context, arg ListTransactionsByCategoryIDParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByCategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserID,
			&i.Ammout,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByUserId = `-- name: ListTransactionsByUserId :many
SELECT id, category_id, user_id, ammout, notes, created_at, updated_at, status FROM transactions
WHERE user_id = $1
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListTransactionsByUserIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactionsByUserId(ctx context.Context, arg ListTransactionsByUserIdParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByUserId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserID,
			&i.Ammout,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
SET (ammout, notes, category_id, updated_at) = ($2, $3, $4, $5)
WHERE id = $1
`

type UpdateTransactionParams struct {
	ID         int32     `json:"id"`
	Ammout     int64     `json:"ammout"`
	Notes      string    `json:"notes"`
	CategoryID int32     `json:"category_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.ID,
		arg.Ammout,
		arg.Notes,
		arg.CategoryID,
		arg.UpdatedAt,
	)
	return err
}
