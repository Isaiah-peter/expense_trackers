// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: category.sql

package db

import (
	"context"
	"time"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  user_id, icon, name
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, icon, name, created_at, updated_at
`

type CreateCategoryParams struct {
	UserID int32  `json:"user_id"`
	Icon   string `json:"icon"`
	Name   string `json:"name"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.UserID, arg.Icon, arg.Name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Icon,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, user_id, icon, name, created_at, updated_at FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Icon,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, user_id, icon, name, created_at, updated_at FROM categories
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Icon,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoryByUserId = `-- name: ListCategoryByUserId :many
SELECT id, user_id, icon, name, created_at, updated_at FROM categories
WHERE user_id = $1
ORDER BY name
LIMIT $2
OFFSET $3
`

type ListCategoryByUserIdParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategoryByUserId(ctx context.Context, arg ListCategoryByUserIdParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategoryByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Icon,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories
SET (name, icon, updated_at) = ($2, $3, $4)
WHERE id = $1
`

type UpdateCategoryParams struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	Icon      string    `json:"icon"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.UpdatedAt,
	)
	return err
}
